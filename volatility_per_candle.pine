//@version=5
indicator("MACD and Volatility Table", shorttitle="Volatility", overlay=true)

// Input to specify the number of candles for volatility calculation
num_candles = 10

// Helper function to round values to 2 decimal places
RoundToTens(value) =>
    math.round(value * 100) / 100

// Function to calculate MACD crossover or crossunder for a given timeframe
get_macd_cross(tf) =>
    [macd_line, signal_line, _] = request.security(syminfo.tickerid, tf, ta.macd(close, 12, 26, 9))
    var string cross_type = na
    var float macd_value_at_cross = na
    if ta.crossover(macd_line, signal_line)
        cross_type := "Over"
        macd_value_at_cross := macd_line
    else if ta.crossunder(macd_line, signal_line)
        cross_type := "Under"
        macd_value_at_cross := macd_line
    [cross_type, macd_value_at_cross]

// Function to calculate volatility (percentage difference between high and low) for a specific timeframe
get_volatility(tf, num_candles) =>
    // Use ta.highest() and ta.lowest() to find highest high and lowest low over the specified number of candles
    highest_high = request.security(syminfo.tickerid, tf, ta.highest(high, num_candles))
    lowest_low = request.security(syminfo.tickerid, tf, ta.lowest(low, num_candles))

    // Calculate volatility as percentage difference between highest high and lowest low
    vol_percentage = (highest_high - lowest_low) / lowest_low * 100

    // Return the volatility
    vol_percentage

// Destructure MACD crossovers and volatility for different timeframes
[cross_type_1m, macd_value_1m] = get_macd_cross("1")
volatility_1m = get_volatility("1", num_candles)  // Calculate volatility based on the specified number of candles for 1 minute timeframe

[cross_type_3m, macd_value_3m] = get_macd_cross("3")
volatility_3m = get_volatility("3", num_candles)  // Calculate volatility based on the specified number of candles for 3 minute timeframe

[cross_type_5m, macd_value_5m] = get_macd_cross("5")
volatility_5m = get_volatility("5", num_candles)  // Calculate volatility based on the specified number of candles for 5 minute timeframe

[cross_type_15m, macd_value_15m] = get_macd_cross("15")
volatility_15m = get_volatility("15", num_candles)  // Calculate volatility based on the specified number of candles for 15 minute timeframe

[cross_type_1h, macd_value_1h] = get_macd_cross("60")
volatility_1h = get_volatility("60", num_candles)  // Calculate volatility based on the specified number of candles for 1 hour timeframe

[cross_type_1d, macd_value_1d] = get_macd_cross("D")
volatility_1d = get_volatility("D", num_candles)  // Calculate volatility based on the specified number of candles for 1 day timeframe


// Create table
var table macd_table = table.new(position.bottom_right, 4, 8, bgcolor=color.new(color.gray, 90))

// Populate table headers
if bar_index == 0
    table.cell(macd_table, 0, 0, text="Time", bgcolor=color.new(color.blue, 85), text_color=color.white)
    table.cell(macd_table, 1, 0, text="Cross", bgcolor=color.new(color.blue, 85), text_color=color.white)
    table.cell(macd_table, 2, 0, text="MACD", bgcolor=color.new(color.blue, 85), text_color=color.white)
    table.cell(macd_table, 3, 0, text="Volatility", bgcolor=color.new(color.blue, 85), text_color=color.white)

// Add row data for each timeframe
add_row(tf, cross_type, macd_value, volatility, row) =>
    cross_color = cross_type == "Over" and macd_value < 0 ? color.new(color.green, 0) : cross_type == "Under" and macd_value > 0 ? color.new(color.red, 0) : color.gray
    table.cell(macd_table, 0, row, text=tf, bgcolor=color.new(color.gray, 85), text_color=color.white)
    table.cell(macd_table, 1, row, text=not na(cross_type) ? cross_type : "N/A", bgcolor=cross_color, text_color=color.white)
    table.cell(macd_table, 2, row, text=not na(macd_value) ? str.tostring(RoundToTens(macd_value)) : "N/A", bgcolor=color.new(color.gray, 85), text_color=color.white)
    table.cell(macd_table, 3, row, text=not na(volatility) ? str.tostring(RoundToTens(volatility)) + "%" : "N/A", bgcolor=color.new(color.gray, 85), text_color=color.white)

// Populate table rows for each timeframe
add_row("1m", cross_type_1m, macd_value_1m, volatility_1m, 1)
add_row("3m", cross_type_3m, macd_value_3m, volatility_3m, 2)
add_row("5m", cross_type_5m, macd_value_5m, volatility_5m, 3)
add_row("15m", cross_type_15m, macd_value_15m, volatility_15m, 4)
add_row("1h", cross_type_1h, macd_value_1h, volatility_1h, 5)
add_row("1d", cross_type_1d, macd_value_1d, volatility_1d, 6)
